**** Bumping version numbers, for components that change (or whose static dependencies change) ***

  I'm trying to follow this convention now for version numbers, to make things a simpler and have an overall RN SDK
  version number when we can:
  - If just one component changes (and API not backwards compatible), bump the version number for it.
    For instance, if 0.5.0 is prevailing version in the RN SDK and Android (but not iOS) native SDK gets updated, we can
    update Android components in the RN SDK to 0.6.0.
  - If several components change (and API not backwards compatible) then bump the version number for all, skipping component versions
    if necessary to have a consistent prevailing version for the RN SDK.
    For instance, in the scenario above, if later the both iOS and Android native SDKs change, then bump
    the version number for Android components from 0.6 to 0.7 and for iOS components from 0.5 to 0.7 (skipping 0.6).
    0.7 becomes the new prevailing version number for the RN SDK.

  First, make sure the iOS/Android native sdk version has been updated. 

  Then, from the root folder, run the follow command to bump the wrapper sdk version:
    bash ./scripts/bump-wrapper-sdk-version.sh --newWrapperSdkVersion=<new_version>
  
  For example, when we want to release v0.8.2 of this SDK, the bash command to run should be:
    bash ./scripts/bump-wrapper-sdk-version.sh --newWrapperSdkVersion=0.8.2

*** Building for iOS ***

  - Download the latest Mobile Center frameworks zip from https://github.com/Microsoft/mobile-center-sdk-ios/releases.
  - Unzip it.
  - Open up RNMobileCenterShared/ios/RNMobileCenterShared.xcodeproj in Xcode
  - Drag in MobileCenter.framework; check "Copy items if needed"; Add to the RNMobileCenterShared target
  - Switch the scheme to "Fat framework" (Product/Scheme menu)
  - Ensure the Destination is Generic iOS Device (though I'm not sure it matters); ensure the "Fat Framework" target is selected
  - Build (Product / Build For / Running)
  - For validation do:
    cd RNMobileCenterShared
    file  ./Products/RNMobileCenterShared/RNMobileCenterShared.framework/RNMobileCenterShared
    And confirm you see output like this:
    RNMobileCenterShared/RNMobileCenterShared.framework/RNMobileCenterShared: Mach-O universal binary with 4 architectures: [arm_v7: current ar archive random library] [i386: current ar archive random library] [x86_64: current ar archive random library] [arm64: current ar archive random library]
    RNMobileCenterShared/RNMobileCenterShared.framework/RNMobileCenterShared (for architecture armv7):    current ar archive random library
    RNMobileCenterShared/RNMobileCenterShared.framework/RNMobileCenterShared (for architecture i386):    current ar archive random library
    RNMobileCenterShared/RNMobileCenterShared.framework/RNMobileCenterShared (for architecture x86_64):    current ar archive random library
    RNMobileCenterShared/RNMobileCenterShared.framework/RNMobileCenterShared (for architecture arm64):    current ar archive random library

  - Zip up the framework:
    cd mobile-center-sdk-react-native/RNMobileCenterShared
    ./zip-framework.sh

*** Publishing for iOS ***
  - If desired as a sanity check, download the old zip, unzip, and diff its contents with the contents of the new zip, to ensure all looks as expected.
  - Create a new release draft here https://github.com/Microsoft/mobile-center-sdk-react-native/releases
  - Rename MobileCenter-SDK-ReactNative-iOS-Pod-0.x.x.zip to have the right version number & drag/drop it into the release definition
  - Publish the release; it will tag the source, so ideally try to make sure it's matched to the binary

  To publish the updated CocoaPod:
  - cd mobile-center-sdk-react-native/RNMobileCenterShared/Products
  - Ensure you are a contributor to the CocoaPod; if you aren't, have the original contributor add your email address as a maintainer
  - Create a session (using your name and email, not joe blow):  pod trunk register joe.blow@microsoft.com 'Joe Blow' --description='macbook pro'
  - Click on the link in the email that arrives to complete creating the session
  - As a sanity check, fetch the latest changes of pod repo:
    pod repo update
  - Lint the update:
    pod spec lint RNMobileCenterShared.podspec  --allow-warnings

    The only warning might be:  There was a problem validating the URL https://mobile.azure.com.
  - Publish the update:
    pod trunk push RNMobileCenterShared.podspec --allow-warnings
  - As a double check, ensure that everything looks OK with the published podspec here:  https://cocoapods.org/?q=RNMobileCenter

*** Building and publishing for Android ***
  - Log into bitrise, go to "mobile-center-sdk-react-native: Android & npm", click Start/Schedule a Build, click Advanced, and change Workflow to "publish-bintray"

  - Validate that it's published here:  https://bintray.com/mobile-center  (login with GitHub auth)
    It should get replicated to jcenter, for public consumption, a few minutes after it's published in bintray.

*** Building and publishing npm ***
  - Log into bitrise, go to "mobile-center-sdk-react-native: Android & npm".
  - Navigate to the last build for the "primary" workflow, or kick off a new build with click Start/Schedule a Build, building the default workflow (primary).
  - Download from artifacts the npm packages you wish to update.
  - If desired as a sanity check, diff the new packages with previously published package tgz files, to ensure all the changes are as expected.
    Beyond Compare can do diffs inside of a tgz.
  - Login to npm with:
    npm login
    Username: mobilecenter
    Password: <provide this>
    Email: mobilecentersdk@microsoft.com
  - Publish with commands like:
    npm publsh mobile-center-analytics-0.2.0.tgz
  - Validate that it's published here:  https://www.npmjs.com/~mobilecenter

*** Testing with the TestApp, pre release ***
  The TestApp is configured to use prerelease versions of the SDK components, from the local source tree.
  - cd mobile-center-sdk-react-native/TestApp
  - Edit (locally only, don't push to git) the build.gradle files for each module, uncommenting the line to point to the
    local RNMobileCenterShared project and commenting out the mobile-center-react-native jcenter dependency below it.
  - Run ./update-link-to-mobile-center.sh
  - Run the TestApp, with react-native run-ios and react-native run-android, or however
  
  The TestApp is configured in Mobile Center, here:
  https://mobile.azure.com/orgs/ReactNativeTesting/apps/rn-sdk-testapp-ios
  https://mobile.azure.com/orgs/ReactNativeTesting/apps/rn-sdk-testapp-android

*** Testing with the DemoApp, post release ***
  The DemoApp is similar to the TestApp, but it's configured to use publicly released SDK components.
  It's primary purpose is to validate, after releasing an SDK update, that integrating the SDK into a new projeect
  all works as expected.

  The DemoApp is configured in Mobile Center, here:
    https://mobile.azure.com/orgs/mobile-center-sdk/apps/React-Native-Demo-iOS
    https://mobile.azure.com/orgs/mobile-center-sdk/apps/React-Native-Demo-Android
  Let Mobile Center build with the latest SDK, then install and test it out on your iOS and Android device.

*** Updating the Demo app, post release ***

  - Build Demo app
  - cd into MobileCenterDemoApp
  - npm install mobile-center mobile-center-analytics mobile-center-crashes mobile-center-push --save
  - run react-native link
  - answer automatic for analytics and process in javascript for Crashes.
  - revert the android changes in strings.xml due to a linker bug on update (it will duplicate some strings).
  - Run Demo app and test everything looks good.
  - make a PR for the changes.

*** Creating the iOS xcodeproj for a new module ***  
  When it comes time to add a new module to the SDK (e.g. for say mobile-center-identity), create the xcode project for it as follows to be consistent with other modules:
  - In Xcode create a new project, type Cocoa Touch Static library
  - In Xcode go Build Settings for the Target; look at the Customized view
  - Open another project (e.g. mobile-center-crashes) as an example; there also bring up Build Settings for the Target, Customized view
  - Visually compare the settings between the two, updating the new project to be consistent. Especially, you need to update Framework Search Paths, Header Search Paths,
    and User Header Search Paths settings. Maybe iOS Deployment Target should change as well.
  - Do the same visual comparison for the Project Build Settings that you did for the Target. There are a couple settings there we change from their defaults.
    When someone goes thru these steps next time, feel free to update this doc and list those settings.
  - When you're done you can also do a textual diff of the project.pbxproj files, to ensure that all the remaining differences look reasonable. That's a good double check.

*** More info ***

  More about the fat framework build process:

  Just to be clear: this is what I mean about the "fat framework" only running a script
  that script invokes the build on the RNMobileCenter target a few times and builds the different archs and puts it all together
  and it looks like the script does build it in release mode
  To see the script:  select RNMobileCenter's root elemetn, select Fat Framework, go to the Build Phases tab, and there is a Run Script target
